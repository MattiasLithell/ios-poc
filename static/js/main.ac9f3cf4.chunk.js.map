{"version":3,"sources":["logo.svg","qr.jsx","barcode.jsx","qr2.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Qr","reader","BrowserQRCodeReader","listVideoInputDevices","then","videoInputDevices","decodeOnceFromVideoDevice","deviceId","result","alert","text","catch","err","console","log","id","height","width","style","border","React","Barcode","Quagga","init","inputStream","type","constraints","facingMode","locator","patchSize","halfSample","numOfWorkers","decoder","readers","locate","start","onDetected","codeResult","code","className","Qr2","capture","accept","App","src","logo","alt","display","justifyContent","margin","to","path","exact","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ac9f3cf4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import * as React from \"react\";\r\nimport { BrowserQRCodeReader } from '@zxing/library';\r\n\r\nexport class Qr extends React.Component {\r\n    constructor() {\r\n        super();\r\n        var reader = new BrowserQRCodeReader();\r\n        reader.listVideoInputDevices()\r\n            .then(videoInputDevices => {\r\n                reader.decodeOnceFromVideoDevice(videoInputDevices[0].deviceId, \"video\")\r\n                    .then(result => { alert(result.text) })\r\n                    .catch(err => console.log(err));\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <video\r\n                id=\"video\"\r\n                height=\"300\"\r\n                width=\"400\"\r\n                style={{ border: \"5px solid red\" }}\r\n            >\r\n            </video>\r\n\r\n        )\r\n    }\r\n\r\n\r\n}\r\n","import * as React from \"react\";\r\nimport Quagga from \"quagga\";\r\n\r\nexport class Barcode extends React.Component {\r\n    componentDidMount() {\r\n        Quagga.init(\r\n            {\r\n              inputStream: {\r\n                type: 'LiveStream',\r\n                constraints: {\r\n                  width: 640,\r\n                  height: 480,\r\n                  facingMode: 'environment', // or user\r\n                },\r\n              },\r\n              locator: {\r\n                patchSize: 'medium',\r\n                halfSample: true,\r\n              },\r\n              numOfWorkers: 4,\r\n              decoder: {\r\n                readers: ['code_128_reader'],\r\n              },\r\n              locate: true,\r\n            },\r\n            function(err) {\r\n              if (err) {\r\n                return console.log(err)\r\n              }\r\n              Quagga.start()\r\n            },\r\n          )\r\n          Quagga.onDetected((result) => \r\n          {\r\n              alert(result.codeResult.code);\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <>\r\n                <h2>Barcode</h2>\r\n                <div id=\"interactive\" className=\"viewport\"></div>\r\n            </>\r\n        )\r\n    }\r\n}","import * as React from \"react\";\r\n\r\nexport class Qr2 extends React.Component {\r\n    constructor() {\r\n        super();        \r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <>\r\n            <input type=\"file\" id=\"videoFile\" capture=\"environment\" accept=\"video/*\"/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Qr } from \"./qr\";\nimport { Barcode } from \"./barcode\";\nimport { Qr2 } from \"./qr2\";\n\nimport { Switch, Route, Link, BrowserRouter as Router } from 'react-router-dom';\n\nclass App extends React.Component {\n\n\n  render() {\n    return (\n\n      <div className=\"App\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Router>\n          <div style={{ width: \"50%\",  display: \"flex\", justifyContent: \"space-evenly\", margin: \"20px auto\"}}>\n          <button>\n              <Link to=\"/\">qr</Link>\n          </button>\n            <button>\n              <Link to=\"/barcode\">barcode</Link>\n            </button>\n            <button>\n              <Link to=\"/qr2\">qr 2</Link>\n            </button>\n          </div>\n          <Switch>\n            <Route path=\"/\" exact>\n              <Qr/>\n            </Route>\n            <Route path=\"/barcode\" exact>\n              <Barcode/>\n            </Route>\n            <Route path=\"/qr2\" exact>\n              <Qr2/>\n            </Route>\n          </Switch>         \n        </Router>\n      </div>\n\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}